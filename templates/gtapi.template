/*
 * GT API 请求示例文件
 * GT API Request File Example
 * 
 * 支持的特性 (Supported Features):
 * 1. 简洁语法 (Concise Syntax): GET /path -> { ... }
 * 2. 环境变量 (Environment Variables): {{variable}}
 * 3. 配置项 (Configuration): @host, @timeout 等
 * 4. 钩子函数 (Hook Functions): beforeRequest, afterRequest 等
 * 5. 响应处理 (Response Handling): response -> (res) { ... }
 * 6. 多行注释 (Multi-line Comments): /* ... */
 * 7. 单行注释 (Single-line Comments): # ...
 */

# 全局配置 (Global Configuration)
@host = "https://api.example.com"  # API 主机地址 (API Host)
@timeout = 5000  # 超时时间(ms) (Timeout in ms)
@response_mode = "line"  # 响应显示模式 (Response Display Mode)

# GET 请求示例 (GET Request Example)
GET /users
headers:
    Authorization: Bearer {{token}}
    Accept: application/json
    User-Agent: {{global.headers.User-Agent}}

# POST 请求示例 - 标准写法 (POST Request Example - Standard Syntax)
POST /users
headers:
    Content-Type: application/json
    Authorization: Bearer {{token}}
data:
    {
        "name": "测试用户",
        "email": "test@example.com",
        "role": "user"
    }

# POST 请求示例 - 简洁写法 (POST Request Example - Concise Syntax)
POST /users -> {
    "name": "另一个用户",
    "email": "another@example.com",
    "role": "admin"
}

# 带钩子的请求示例 (Request with Hooks Example)
POST /login -> {
    "username": "{{username}}",
    "password": "{{password}}"
}
hooks:
    beforeRequest: (req) {
        // 请求前处理 (Pre-request Processing)
        ant.log("准备发送请求...")
        
        // 密码加密 (Password Encryption)
        if (req.data.password) {
            req.data.password = ant.utils.encrypt(req.data.password)
        }
        
        // 使用存储变量 (Using Storage Variables)
        const retryCount = ant.hooks.storage.custom.retryCount
        ant.log(`重试次数设置为: ${retryCount}`)
    }
    
    afterRequest: (res) {
        // 请求后处理 (Post-request Processing)
        ant.log("请求已发送")
        
        // 性能指标记录 (Performance Metrics Recording)
        ant.hooks.storage.metrics.lastRequestTime = Date.now()
        ant.hooks.storage.metrics.totalRequests++
    }
    
    beforeResponse: (res) {
        // 响应前处理 (Pre-response Processing)
        const duration = Date.now() - ant.hooks.storage.metrics.lastRequestTime
        ant.log(`响应时间: ${duration}ms`)
        
        // 错误检查 (Error Checking)
        if (res.status >= 400) {
            ant.error(`请求失败: ${res.status}`)
            ant.hooks.storage.metrics.failedRequests++
        }
    }
    
    afterResponse: (res) {
        // 响应后处理 (Post-response Processing)
        if (res.data.token) {
            // 保存认证信息 (Save Authentication Info)
            ant.env.set("token", res.data.token)
            ant.hooks.storage.cache.tokens.current = res.data.token
            ant.log("Token已保存")
        }
        
        // 更新成功计数 (Update Success Counter)
        if (res.status < 400) {
            ant.hooks.storage.metrics.successRequests++
        }
    }

# 带响应处理的请求示例 (Request with Response Handler Example)
GET /data
headers:
    Accept: application/json
response -> (res) {
    try {
        // 数据处理 (Data Processing)
        const data = res.data
        
        // 数据转换 (Data Transformation)
        const processed = data.map(item => ({
            ...item,
            processedAt: new Date().toISOString()
        }))
        
        // 使用代理监控属性访问 (Using Proxy to Monitor Property Access)
        const proxy = new Proxy(processed, {
            get(target, prop) {
                ant.log(`访问属性: ${prop}`)
                return target[prop]
            }
        })
        
        // 保存到缓存 (Save to Cache)
        ant.hooks.storage.cache.responses.lastSuccess = proxy
        
        return proxy
    } catch (err) {
        // 错误处理 (Error Handling)
        ant.error("数据处理错误:", err.message)
        ant.hooks.storage.state.lastError = err
        throw err
    }
}

# 测试各种 HTTP 方法 (Testing Various HTTP Methods)
PUT /users/1 -> {
    "status": "active"
}

PATCH /users/1 -> {
    "lastLogin": "{{new Date().toISOString()}}"
}

DELETE /users/1
headers:
    Authorization: Bearer {{token}}

# 更多示例请参考文档 (More Examples in Documentation)
# https://github.com/your-repo/easy-requester/docs 